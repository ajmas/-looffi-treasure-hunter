stages:
  - test
  - docker-build
  - docker-release-build

.cache: &node_cache
  key: '$CI_COMMIT_REF_SLUG'
  paths:
    - node_modules/
    - .yarn

variables:
  HUSKY: 0

docker-dev-build:
  # Use the official docker image.
  image: docker:latest
  stage: docker-build
  interruptible: true
  services:
    - docker:dind
  before_script:
    - apk add jq
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - /bin/sh ./scripts/generate-appinfo.sh public/appinfo.json
    - |
      docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" \
       --build-arg GIT_COMMIT_SHA=$CI_COMMIT_SHA \
       --build-arg CI_BUILD_REF_NAME=$CI_BUILD_REF_NAME \
       --build-arg GIT_BRANCH=$CI_COMMIT_BRANCH .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_TAG'
#    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

docker-release-build:
  # Use the official docker image.
  image: docker:latest
  stage: docker-build
  services:
    - docker:dind
  before_script:
    - apk add jq
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  # Note: there is not $CI_COMMIT_BRANCH when $CI_COMMIT_TAG is passed by CI
  script:
    - |
      tag=":$CI_COMMIT_TAG"
      echo "Running release build for tag $tag"
    - /bin/sh ./scripts/generate-appinfo.sh public/appinfo.json
    - |
      docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" \
       --build-arg CI_COMMIT_TAG=$CI_COMMIT_TAG \
       --build-arg GIT_COMMIT_SHA=$CI_COMMIT_SHA \
       --build-arg CI_BUILD_REF_NAME=$CI_BUILD_REF_NAME \
       --build-arg GIT_BRANCH=$CI_COMMIT_BRANCH .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_TAG =~ /^V.*/
      exists:
        - Dockerfile

all_tests:
  image: node:20
  cache:
    <<: *node_cache
  stage: test
  interruptible: true
  variables:
    ENV: devci
    NODE_ENV: 'test'
  script:
#    - free -h
    - export CONTINUOUS_INTEGRATION=1
    - yarn install --link-duplicates --prefer-offline --pure-lockfile
    - NODE_ENV=production
    - yarn run lint
    - yarn run build

